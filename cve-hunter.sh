#!/bin/bash

## Declare Color Scheme

bred='\033[1;31m'
bblue='\033[1;34m'
bgreen='\033[1;32m'
byellow='\033[1;33m'
red='\033[0;31m'
blue='\033[0;34m'
green='\033[0;32m'
yellow='\033[0;33m'
reset='\033[0m'


echo '  ____ __     __ _____        _   _  _   _  _   _  _____  _____  ____  '
echo ' / ___|\ \   / /| ____|      | | | || | | || \ | ||_   _|| ____||  _ \ '
echo '| |     \ \ / / |  _|  _____ | |_| || | | ||  \| |  | |  |  _|  | |_) |'
echo '| |___   \ V /  | |___|_____||  _  || |_| || |\  |  | |  | |___ |  _ < '
echo ' \____|   \_/   |_____|      |_| |_| \___/ |_| \_|  |_|  |_____||_| \_\'
echo
echo
echo

## Arguement Declarations

urls=$1

printf "${bblue}[+] Welcome to CVE-Hunter${reset}\n\n"
printf "${bblue}[+] Creating a directory for the findings${reset}\n\n"

mkdir hunter_findings

## Run WebAnalyze

printf "${bblue}[+] Running webanalyze against the target list${reset}\n\n"

printf "${bblue}[+] Here is what we found! Check the hunter_findings folder for the output files${reset}"
printf "\n\n"

printf "${byellow}[+] The webanalyze settings where:${reset}\n"
webanalyze -hosts urls.txt -output csv > ~/hunter_findings/webanalyze-all.csv
printf "\n\n"

printf "${bred}[+] Here are the Operating Systems that we found${reset}\n"
awk '/Operating systems/ {print}' ~/hunter_findings/webanalyze-all.csv | tee ~/hunter_findings/webanalyze-operating-systems.csv
printf "\n\n"

printf "${bred}[+] Here are the programing languages that we found${reset}\n"
awk '/Programming languages/ {print}' ~/hunter_findings/webanalyze-all.csv | tee ~/hunter_findings/webanalyze-programing-languages.csv
printf "\n\n"

printf "${bred}[+] Here are the web server types that we found${reset}\n"
awk '/Web servers/ {print}' ~/hunter_findings/webanalyze-all.csv | tee ~/hunter_findings/webanalyze-web-server-types.csv
sed -i 's/".*"/Reverse proxies/g' ~/hunter_findings/webanalyze-web-server-types.csv
printf "\n\n"

printf "${bblue}[+] Updating database from the following soruces: OSV, NVD, GitHub, and NPM${reset}\n"
vdb --sync
printf "\n\n"



## Search for CVEs related to Programming Languages


printf "${bblue}[+] Searching for programing language related CVEs with AppThreat.!!${reset}\n\n"


while read line; do

        url=$(echo $line | cut -d ',' -f 1)
        programing_language=$(echo $line | cut -d',' -f3,4 | tr [:upper:] [:lower:] | tr ", " ":")
        printf "${byellow}[+] The endpoint '$url' is utilizing '$programing_language' ${reset}\n"
        vdb --search $programing_language >> ~/hunter_findings/vdb-programing-languages.txt; cat ~/hunter_findings/vdb-programing-languages.txt | grep CVE >> ~/hunter_findings/vdb-programing-languages-cves-only.txt
        printf "\n"
        printf "${bred}[+] Searching for CRITICAL rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-programing-languages-cves-only.txt | grep --color=auto -E 'CRITICAL'
        printf "\n"
        printf "${bred}[+] Searching for HIGH rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-programing-languages-cves-only.txt | grep --color=auto -E 'HIGH'
        printf "\n"
        printf "${bred}[+] Searching for MEDIUM rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-programing-languages-cves-only.txt | grep --color=auto -E 'MEDIUM'
        printf "\n"
        printf "${bred}[+] Searching for LOW rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-programing-languages-cves-only.txt | grep --color=auto -E 'LOW'
        printf "\n"
        printf "${bblue}[+] Creating 'programing-languages-cves-by-endpoint.txt' list ${reset}\n"
        cat ~/hunter_findings/vdb-programing-languages-cves-only.txt | cut -d '|' -f 2 | awk '{$1=$1};1'| awk -v url=$url '$0=url$0' | sed 's/CVE/,CVE/g' >> ~/hunter_findings/programing-languages-cves-by-endpoint.txt
        printf "\n"
        printf "${bgreen}[+] Search for '$url' concluded moving on to the next endpoint ${reset}\n\n"

done < ~/hunter_findings/webanalyze-programing-languages.csv

printf "\n\n"




## Search for CVEs related to Web Servers

printf "${bblue}[+] Searching for web server version related CVEs with AppThreat.!${reset}\n\n"


while read line; do

        url=$(echo $line | cut -d ',' -f 1)
        web_server_version=$(echo $line | cut -d',' -f3,4 | tr [:upper:] [:lower:] | tr ", " ":")
        printf "${byellow}[+] The endpoint '$url' is utilizing '$web_server_version' ${reset}\n"
        vdb --search $web_server_version >> ~/hunter_findings/vdb-web-server.txt; cat ~/hunter_findings/vdb-web-server.txt | grep CVE >> ~/hunter_findings/vdb-web-server-cves-only.txt
        printf "\n"
        printf "${bred}[+] Searching for CRITICAL rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-web-server-cves-only.txt | grep --color=auto -E 'CRITICAL'
        printf "\n"
        printf "${bred}[+] Searching for HIGH rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-web-server-cves-only.txt | grep --color=auto -E 'HIGH'
        printf "\n"
        printf "${bred}[+] Searching for MEDIUM rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-web-server-cves-only.txt | grep --color=auto -E 'MEDIUM'
        printf "\n"
        printf "${bred}[+] Searching for LOW rated CVEs with AppThreat (vdb) ${reset}\n"
        cat ~/hunter_findings/vdb-web-server-cves-only.txt | grep --color=auto -E 'LOW'
        printf "\n"
        printf "${bblue}[+] Creating 'web-server-cves-by-endpoint.txt' list ${reset}\n"
        cat ~/hunter_findings/vdb-web-server-cves-only.txt | cut -d '|' -f 2 | awk '{$1=$1};1'| awk -v url=$url '$0=url$0' | sed 's/CVE/,CVE/g' >> ~/hunter_findings/web-server-cves-by-endpoint.txt
        printf "\n"
        printf "${bgreen}[+] Search for '$url' concluded moving on to the next endpoint ${reset}\n\n"

done < ~/hunter_findings/webanalyze-web-server-types.csv




## Need to make it so you can run this from any directory

## Run Nuclei against programming lanaguage for cves

printf "${bblue}[+] Running Nuclei against programming language related CVEs${reset}\n\n"


while read line; do

        url=$(echo $line | cut -d ',' -f 1)
        cve=$(echo $line | cut -d ',' -f 2)
        nuclei_template_path_finder=$(find ./.local/nuclei-templates/cves/ -iname $cve.yaml)
        nuclei_template_path=$(echo "$nuclei_template_path_finder")
        if [ -z ${nuclei_template_path} ]; then
            printf "${byellow}[+] Nuclei does not have a template for $cve ${reset}\n\n"
        else
            printf "${bred}[+] Nuclei is running a template for $cve against $url ${reset}\n\n"
            nuclei -u $url -t $nuclei_template_path -silent >> ~/hunter_findings/nuclei-findings.txt
            printf "${bgreen}[+] Nuclei finsihed running a template for $cve against $url ${reset}\n\n"
            printf "${bgreen}[+] Check the 'nuclei-findings.txt' file for more info ${reset}\n\n"
        fi

done < ~/hunter_findings/programing-languages-cves-by-endpoint.txt


## Run Nuclei against web server versions for cves

printf "${bblue}[+] Running Nuclei against Web Server Version related CVEs${reset}\n\n"


while read line; do

        url=$(echo $line | cut -d ',' -f 1)
        cve=$(echo $line | cut -d ',' -f 2)
        nuclei_template_path_finder=$(find ./.local/nuclei-templates/cves/ -iname $cve.yaml)
        nuclei_template_path=$(echo "$nuclei_template_path_finder")
        if [ -z ${nuclei_template_path} ]; then
            printf "${byellow}[+] Nuclei does not have a template for $cve ${reset}\n\n"
        else
            printf "${bred}[+] Nuclei is running a template for $cve against $url ${reset}\n\n"
            nuclei -u $url -t $nuclei_template_path -silent >> ~/hunter_findings/nuclei-findings.txt
            printf "${bgreen}[+] Nuclei finsihed running a template for $cve against $url ${reset}\n\n"
            printf "${bgreen}[+] Check the 'nuclei-findings.txt' file for more info ${reset}\n\n"
        fi

done < ~/hunter_findings/web-server-cves-by-endpoint.txt




